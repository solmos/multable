devtools::load_all(".")
install.packages("devtools")
create_table <- function(k, xmax, ymax) {
# Create the grid of values and their product
values <- expand.grid(x = 0:xmax,
y = 0:ymax)
values$product <- values$x * values$y
# Whether a value x is a multiple of k
find_multiples <- function(x, k) x %% k == 0
# Apply find_multiples() for all values of vector k
multiples <- sapply(k, find_multiples, x = values$product)
multiples <- as.data.frame(multiples)
col_names <- paste0("m", as.character(k))
colnames(multiples) <- col_names
# Get a factor specifying for which values of k
# each product is a multiple of
combination <- interaction(multiples)
table <- data.frame(values, multiples, combination)
cat("There were", length(levels(table$combination)), "observed combinations.")
table
}
draw_pattern <- function(k, xmax, ymax,
colors, show_title = TRUE,
show_numbers = FALSE,
show_legend = FALSE) {
if (missing(xmax)) {
xmax <- numbers::mLCM(k) * 4
# If xmax/ymax is very large it will take a lot of time
# and the plot will be ugly
xmax <- ifelse(xmax < 200, xmax, 200)
}
if (missing(ymax)) {
ymax <- numbers::mLCM(k) * 4
ymax <- ifelse(ymax < 200, ymax, xmax)
}
# Grid of values with corresponding products
table <- create_table(k, xmax, ymax)
# Default colors: random color palette from wesanderson package
if (missing(colors)) {
n_colors <- length(levels(table$combination))
palette_names <- names(wesanderson::wes_palettes)
random_palette_name <- sample(palette_names, 1)
chosen_colors <- wesanderson::wes_palette(random_palette_name,
n_colors, "continuous")
} else {
chosen_colors <- colors
n_combinations <- length(levels(table$combination))
if (length(chosen_colors) != n_combinations) {
cat("There were", n_combinations, "observed combinations, but",
length(chosen_colors), "colors introduced.")
}
}
plt <- ggplot(table, aes(x, y)) +
geom_tile(aes(fill = combination)) +
scale_y_continuous(trans = "reverse") +
scale_fill_manual(values = chosen_colors) +
coord_fixed() +
theme_void()
# Show title option
if (show_title == TRUE) {
if (missing(colors)) {
k_as_string <- paste(sort(k), collapse = ", ")
plt_title <- paste0("Multiples of ", k_as_string,
" (", random_palette_name, ")")
} else {
k_as_string <- paste(sort(k), collapse = ", ")
plt_title <- paste0("Multiples of ", k_as_string)
}
plt <- plt + ggtitle(plt_title)
}
# Show legend option
if (show_legend == FALSE) {
plt <- plt + guides(fill = FALSE)
}
plt
}
draw_pattern(c(4, 6, 8))
devtools::load_all(".")
devtools::load_all(".")
create_table(2, 10, 10)
library(usethis)
use_package("ggplot2")
use_package("numbers")
use_package("wesanderson")
install.packages("roxygen2")
devtools::load_all(".")
devtools::document()
usethis::use_mit_license()
usethis::use_mit_license("Sergio Olmos Pardo")
devtools::document()
library(devtools)
document()
load_all()
create_table(2, 10, 10)
install_github("multable", "solmos")
?install_github
install_github("solmos/multable")
create_table(2, 10, 10)
document()
install_github("solmos/TFMpack")
library(TFMpack)
?get_estimates
devtools::load_all(".")
?create_table
devtools::load_all(".")
?multable
?get_estimates
draw_pattern(2, 10, 10)
draw_pattern(2, 10, 10)
draw_pattern(2, 10, 10)
draw_pattern(2, 10, 10)
draw_pattern(2, 10, 10)
colors <- wesanderson::wes_palette("GrandBudapest1", 4)
colors
length(colors)
draw_pattern(c(2,3))
colors <- wesanderson::wes_palette("GrandBudapest1", 5)
colors <- wesanderson::wes_palette("GrandBudapest1", 5, type = "continuous")
colors
draw_pattern(c(2, 3), colors = colors)
draw_pattern(c(2, 3), colors = colors)
devtools::load_all(".")
draw_pattern(c(2, 3), colors = colors)
devtools::document()
devtools::load_all(".")
